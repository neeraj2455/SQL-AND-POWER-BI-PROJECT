CREATE DATABASE GROCERYDB;
USE GROCERYDB;

/*--------- 1. SUPPLIER TABLE--------*/
CREATE TABLE SUPPLIER (
    SUPPLIER_ID INT PRIMARY KEY,
   SUPPLIER_NAME VARCHAR(50),
	ADDRESS VARCHAR(50)
);
DESC SUPPLIER;

SELECT * FROM SUPPLIER;

/*------- 2. CATEGORIES TABLE-----------*/
CREATE TABLE CATEGORIES (
CATEGORY_ID INT PRIMARY KEY,
CATEGORY_NAME VARCHAR(50)
);

SELECT * FROM CATEGORIES;

/*-------- 3. EMPLOYEES TABLE---------*/
CREATE TABLE EMPLOYEES(
EMPLOYEE_ID INT PRIMARY KEY,
EMPLOYEE_NAME VARCHAR(50),
HIREDATE VARCHAR(50)
);

SELECT * FROM EMPLOYEES;

/*--------- 4. CUSTOMERS TABLE-----------*/
CREATE TABLE CUSTOMERS(
CUSTOMER_ID INT PRIMARY KEY,
CUSTOMER_NAME VARCHAR(50),
ADDRESS TEXT
);

SELECT * FROM CUSTOMERS;

/*------ 5. PRODUCTS TABLE--------*/
CREATE TABLE PRODUCTS(
    PROD_ID INT PRIMARY KEY,
    PROD_NAME VARCHAR(255),
    SUPPLIER_ID INT,
   CATEGORY_ID INT,
    PRICE DECIMAL(10,2),
    FOREIGN KEY (SUPPLIER_ID) REFERENCES SUPPLIER(SUPPLIER_ID)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (CATEGORY_ID) REFERENCES CATEGORIES(CATEGORY_ID)
        ON UPDATE CASCADE ON DELETE CASCADE
);

SELECT * FROM PRODUCTS;

/*----------- 6. ORDERS TABLE-------------*/
CREATE TABLE ORDERS(
    ORD_ID SMALLINT PRIMARY KEY,
    CUSTOMER_ID INT,
   EMPLOYEE_ID INT,
   ORDER_DATE VARCHAR(255),
    FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMERS(CUSTOMER_ID)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEES(EMPLOYEE_ID)
        ON UPDATE CASCADE ON DELETE CASCADE
);

ALTER TABLE ORDERS MODIFY ORDER_DATE DATE;
SELECT * FROM ORDERS;

/*------- 7. ORDER_DETAILS TABLE---------*/
CREATE TABLE ORDER_DETAILS(
    ORD_DETID SMALLINT AUTO_INCREMENT PRIMARY KEY,
    ORD_ID SMALLINT,
    PROD_ID INT,
    QUANTITY TINYINT,
    EACH_PRICE DECIMAL(10,2),
    TOTAL_PRICE DECIMAL(10,2),
    FOREIGN KEY (ORD_ID) REFERENCES ORDERS(ORD_ID)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (PROD_ID) REFERENCES PRODUCTS(PROD_ID)
        ON UPDATE CASCADE ON DELETE CASCADE
);

SELECT * FROM ORDER_DETAILS;

/*-----------------ANALYSIS QUESTIONS----------------*/
/*-----------------1.CUSTOMER INSIGHTS---------------*/

-- HOW MANY UNIQUE CUSTOMERS HAVE PLACED ORDERS?
SELECT COUNT(DISTINCT(CUSTOMER_ID)) AS UNIQUE_CUSTOMERS
FROM ORDERS;

-- WHICH CUSTOMERS HAVE PLACED THE HIGHEST NUMBER OF ORDERS?
SELECT C.CUSTOMER_ID, C.CUSTOMER_NAME, COUNT(O.ORD_ID) AS NUMBER_OF_ORDERS
FROM CUSTOMERS C
JOIN
ORDERS O ON C.CUSTOMER_ID = O.CUSTOMER_ID
GROUP BY C.CUSTOMER_ID
ORDER BY NUMBER_OF_ORDERS
LIMIT 1;

-- WHAT IS THE TOTAL AND AVERAGE PURCHASE VALUE PER CUSTOMER?
SELECT O.CUSTOMER_ID, C.CUSTOMER_NAME, SUM(O_D.TOTAL_PRICE) AS TOTAL_PURCHASE, AVG(O_D.TOTAL_PRICE) AS AVERAGE_PURCHASE
FROM ORDERS O
JOIN 
ORDER_DETAILS O_D ON O.ORD_ID = O_D.ORD_ID
JOIN CUSTOMERS C ON O.CUSTOMER_ID = C.CUSTOMER_ID;

-- WHO ARE THE TOP 5 CUSTOMERS BY TOTAL PURCHASE AMOUNT?
SELECT O.CUSTOMER_ID, C.CUSTOMER_NAME, SUM(O_D.TOTAL_PRICE) AS TOTAL_PURCHASE
FROM ORDERS O
JOIN 
ORDER_DETAILS O_D ON O.ORD_ID = O_D.ORD_ID
JOIN CUSTOMERS C ON O.CUSTOMER_ID = C.CUSTOMER_ID
GROUP BY O.CUSTOMER_ID
ORDER BY TOTAL_PURCHASE DESC
LIMIT 5;

/*--------------2. PRODUCT PERFORMANCE-------------------*/
-- HOW MANY PRODUCTS EXIST IN EACH CATEGORY?
SELECT C.CATEGORY_ID, C.CATEGORY_NAME, SUM(P.PROD_ID) AS TOTAL_PRODUCTS
FROM CATEGORIES C 
LEFT JOIN
PRODUCTS P ON C.CATEGORY_ID = P.CATEGORY_ID
GROUP BY C.CATEGORY_ID;

-- WHAT IS THE AVERAGE PRICE OF PRODUCTS BY CATEGORY?
SELECT C.CATEGORY_ID, C.CATEGORY_NAME, AVG(P.PRICE) AS AVERAGE_PRICE
FROM CATEGORIES C 
LEFT JOIN
PRODUCTS P ON C.CATEGORY_ID = P.CATEGORY_ID
GROUP BY C.CATEGORY_ID;

-- WHICH PRODUCTS HAVE THE HIGHEST TOTAL SALES VOLUME (BY QUANTITY)?
SELECT P.PROD_NAME, SUM(QUANTITY) AS TOTAL_SALES
FROM ORDER_DETAILS OD
LEFT JOIN 
PRODUCTS P ON OD.PROD_ID = P.PROD_ID
GROUP BY OD.PROD_ID
ORDER BY TOTAL_SALES DESC;

-- WHAT IS THE TOTAL REVENUE GENERATED BY EACH PRODUCT?
SELECT P.PROD_NAME, SUM(OD.TOTAL_PRICE) AS TOTAL_REVENUE_GENERATED
FROM ORDER_DETAILS OD
LEFT JOIN 
PRODUCTS P ON OD.PROD_ID = P.PROD_ID
GROUP BY PROD_NAME
ORDER BY TOTAL_REVENUE_GENERATED DESC;

-- HOW DO PRODUCT SALES VARY BY CATEGORY AND SUPPLIER?
SELECT C.CATEGORY_NAME, S.SUPPLIER_NAME, SUM(OD.TOTAL_PRICE) AS TOTAL_SALES
FROM ORDER_DETAILS OD
JOIN
PRODUCTS P ON OD.PROD_ID = P.PROD_ID
JOIN 
CATEGORIES C ON P.CATEGORY_ID = C.CATEGORY_ID
JOIN
SUPPLIER S ON P.SUPPLIER_ID = S.SUPPLIER_ID
GROUP BY C.CATEGORY_NAME, S.SUPPLIER_NAME
ORDER BY C.CATEGORY_NAME, TOTAL_SALES DESC;

/*--------------- 3. SALES AND ORDER TRENDS-----------------*/
-- HOW MANY ORDERS HAVE BEEN PLACED IN TOTAL?
SELECT COUNT(*) AS TOTAL_ORDERS
FROM ORDERS;

-- WHAT IS THE AVERAGE VALUE PER ORDER?
SELECT AVG(TOTAL_PRICE) AS AVG_VALUE_PER_ORDER
FROM ORDER_DETAILS;

-- ON WHICH DATES WERE THE MOST ORDERS PLACED?
SELECT ORDER_DATE, COUNT(*) AS TOTAL_ORDERS
FROM ORDERS
GROUP BY ORDER_DATE
ORDER BY TOTAL_ORDERS DESC;

-- WHAT ARE THE MONTHLY TRENDS IN ORDER VOLUME AND REVENUE?
SELECT LEFT(O.ORDER_DATE, 7) AS ORDER_MONTH,
COUNT(DISTINCT O.ORD_ID) AS TOTAL_ORDERS, SUM(OD.EACH_PRICE * OD.QUANTITY) AS TOTAL_REVENUE
FROM ORDERS O
JOIN ORDER_DETAILS OD 
    ON O.ORD_ID = OD.ORD_ID
GROUP BY ORDER_MONTH
ORDER BY ORDER_MONTH;

-- HOW DO ORDER PATTERNS VARY ACROSS WEEKDAYS AND WEEKENDS?
SELECT DATE_FORMAT(STR_TO_DATE(TRIM(ORDER_DATE), '%c/%e/%Y'), '%Y-%m') AS ORDER_MONTH,
COUNT(DISTINCT ORD_ID) AS ORDER_VOLUME,
COUNT(ORD_ID) AS TOTAL_REVENUE
FROM ORDERS
GROUP BY ORDER_MONTH
ORDER BY ORDER_MONTH;

/*-----------4. SUPPLIER CONTRIBUTION--------------*/
-- HOW MANY SUPPLIERS ARE THERE IN THE DATABASE?
SELECT COUNT(*) AS TOTAL_SUPPLIERS
FROM SUPPLIER;

-- WHICH SUPPLIER PROVIDES THE MOST PRODUCTS?
SELECT S.SUPPLIER_ID, S.SUPPLIER_NAME, COUNT(P.PROD_ID) AS TOTAL_PRODUCT
FROM SUPPLIER S
JOIN PRODUCTS P ON S.SUPPLIER_ID = P.SUPPLIER_ID
GROUP BY S.SUPPLIER_ID
ORDER BY TOTAL_PRODUCT
LIMIT 1;

-- WHAT IS THE AVERAGE PRICE OF PRODUCTS FROM EACH SUPPLIER?
SELECT S.SUPPLIER_ID, S.SUPPLIER_NAME, AVG(P.PRICE) AS AVERAGE_PRICE_PRODUCTS
FROM PRODUCTS P
JOIN SUPPLIER S ON P.SUPPLIER_ID = S.SUPPLIER_ID;

-- WHICH SUPPLIERS CONTRIBUTE THE MOST TO TOTAL PRODUCT SALES (BY REVENUE)? 
SELECT S.SUPPLIER_ID, S.SUPPLIER_NAME, SUM(OD.QUANTITY * OD.EACH_PRICE) AS TOTAL_REVENUE
FROM SUPPLIER S 
JOIN 
PRODUCTS P ON S.SUPPLIER_ID = P.SUPPLIER_ID
JOIN 
ORDER_DETAILS OD ON P.PROD_ID = OD.PROD_ID
GROUP BY S.SUPPLIER_ID
ORDER BY TOTAL_REVENUE DESC;

/*-----------5. EMPLOYEE PERFORMANCE--------------*/
-- HOW MANY EMPLOYEES HAVE PROCESSED ORDERS?
SELECT COUNT(EMPLOYEE_ID)
FROM ORDERS;

-- WHICH EMPLOYEES HAVE HANDLED THE MOST ORDERS?
SELECT E.EMPLOYEE_ID, E.EMPLOYEE_NAME, COUNT(O.ORD_ID) AS NO_OF_ORDERS
FROM ORDERS O 
JOIN EMPLOYEES E ON
O.EMPLOYEE_ID = E.EMPLOYEE_ID
GROUP BY E.EMPLOYEE_ID
ORDER BY NO_OF_ORDERS DESC
LIMIT 1;

-- WHAT IS THE TOTAL SALES VALUE PROCESSED BY EACH EMPLOYEE?
SELECT E.EMPLOYEE_ID, E.EMPLOYEE_NAME, SUM(OD.TOTAL_PRICE) AS TOTAL_SALES
FROM ORDERS O 
JOIN EMPLOYEES E ON O.EMPLOYEE_ID = E.EMPLOYEE_ID
JOIN ORDER_DETAILS OD ON O.ORD_ID = OD.ORD_ID
GROUP BY E.EMPLOYEE_ID
ORDER BY TOTAL_SALES DESC;

-- WHAT IS THE AVERAGE ORDER VALUE HANDLED PER EMPLOYEE? 
SELECT E.EMPLOYEE_ID, E.EMPLOYEE_NAME, AVG(O.ORD_ID) AS AVERAGE_ORDER
FROM EMPLOYEES E 
JOIN ORDERS O ON E.EMPLOYEE_ID = O.EMPLOYEE_ID
JOIN ORDER_DETAILS OD ON O.ORD_ID = OD.ORD_ID
GROUP BY E.EMPLOYEE_ID
ORDER BY AVERAGE_ORDER;

/*-------------6.ORDER DETAILS DEEP -------------*/
-- WHAT IS THE RELATIONSHIP BETWEEN QUANTITY ORDERED AND TOTAL PRICE?
SELECT COUNt(*) AS TOTAL_ORDER_COUNT, QUANTITY, AVG(OD.TOTAL_PRICE) AS AVERAGE_PRICE
FROM ORDER_DETAILS OD
GROUP BY QUANTITY
ORDER BY AVERAGE_PRICE DESC;

-- WHAT IS THE AVERAGE QUANTITY ORDERED PER PRODUCT?
SELECT PROD_ID, AVG(QUANTITY) AS AVG_QUANTITY_ORDERED
FROM ORDER_DETAILS
GROUP BY PROD_ID;

-- HOW DOES THE UNIT PRICE VARY ACROSS PRODUCTS AND ORDERS?
SELECT P.PROD_NAME,
    MIN(OD.EACH_PRICE) AS MIN_PRICE,
    MAX(OD.EACH_PRICE) AS MAX_PRICE,
    AVG(OD.EACH_PRICE) AS AVG_PRICE
FROM ORDER_DETAILS OD
JOIN PRODUCTS P ON OD.PROD_ID = P.PROD_ID
GROUP BY P.PROD_NAME
ORDER BY AVG_P+RICE DESC;




